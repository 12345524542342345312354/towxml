(function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{var g;g="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,g.markdownitTaskLists=f()}})(function(){return function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}return e}()({1:[function(require,module,exports){function attrSet(token,name,value){var index=token.attrIndex(name),attr=[name,value];index<0?token.attrPush(attr):token.attrs[index]=attr}function parentToken(tokens,index){for(var targetLevel=tokens[index].level-1,i=index-1;i>=0;i--)if(tokens[i].level===targetLevel)return i;return-1}function isTodoItem(tokens,index){return isInline(tokens[index])&&isParagraph(tokens[index-1])&&isListItem(tokens[index-2])&&startsWithTodoMarkdown(tokens[index])}function todoify(token,TokenConstructor){if(token.children.unshift(makeCheckbox(token,TokenConstructor)),token.children[1].content=token.children[1].content.slice(3),token.content=token.content.slice(3),useLabelWrapper)if(useLabelAfter){token.children.pop();var id="task-item-"+Math.ceil(1e7*Math.random()-1e3);token.children[0].content=token.children[0].content.slice(0,-1)+' id="'+id+'">',token.children.push(afterLabel(token.content,id,TokenConstructor))}else token.children.unshift(beginLabel(TokenConstructor)),token.children.push(endLabel(TokenConstructor))}function makeCheckbox(token,TokenConstructor){var checkbox=new TokenConstructor("html_inline","",0),disabledAttr=disableCheckboxes?' disabled="" ':"",value=' value="'+token.content+'" ';return 0===token.content.indexOf("[ ] ")?checkbox.content='<checkbox class="task-list-item-checkbox"'+disabledAttr+value+"/>":0!==token.content.indexOf("[x] ")&&0!==token.content.indexOf("[X] ")||(checkbox.content='<checkbox class="task-list-item-checkbox" checked="true"'+disabledAttr+value+"/>"),checkbox}function beginLabel(TokenConstructor){var token=new TokenConstructor("html_inline","",0);return token.content="<label>",token}function endLabel(TokenConstructor){var token=new TokenConstructor("html_inline","",0);return token.content="</label>",token}function afterLabel(content,id,TokenConstructor){var token=new TokenConstructor("html_inline","",0);return token.content='<label class="task-list-item-label" for="'+id+'">'+content+"</label>",token.attrs=[{for:id}],token}function isInline(token){return"inline"===token.type}function isParagraph(token){return"paragraph_open"===token.type}function isListItem(token){return"list_item_open"===token.type}function startsWithTodoMarkdown(token){return 0===token.content.indexOf("[ ] ")||0===token.content.indexOf("[x] ")||0===token.content.indexOf("[X] ")}var disableCheckboxes=!0,useLabelWrapper=!1,useLabelAfter=!1;module.exports=function(md,options){options&&(disableCheckboxes=!options.enabled,useLabelWrapper=!!options.label,useLabelAfter=!!options.labelAfter),md.core.ruler.after("inline","github-task-lists",function(state){for(var tokens=state.tokens,i=2;i<tokens.length;i++)isTodoItem(tokens,i)&&(todoify(tokens[i],state.Token),attrSet(tokens[i-2],"class","task-list-item"+(disableCheckboxes?"":" enabled")),attrSet(tokens[parentToken(tokens,i-2)],"class","contains-task-list"))})}},{}]},{},[1])(1)});